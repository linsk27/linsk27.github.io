[{"content":"推送失败，gitee仓库缺少公钥 1 git push origin lsk_dev 1 2 3 4 5 6 7 8 9 10 11 The authenticity of host \u0026#39;gitee.com (180.76.198.77)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:+ULzij2u99B9eWYFTw1Q4ErYG/aepHLbu96PAUCoV88. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? y Please type \u0026#39;yes\u0026#39;, \u0026#39;no\u0026#39; or the fingerprint: yes Warning: Permanently added \u0026#39;gitee.com\u0026#39; (ED25519) to the list of known hosts. git@gitee.com: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 检查与自己gitee仓库连接失败，没有显示hellow 1 ssh -T git@gitee.com 1 git@gitee.com: Permission denied (publickey). 进行公钥配置 1 ssh-keygen -t rsa -C \u0026#34;14062626+linsk27@user.noreply.gitee.com\u0026#34; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Generating public/private rsa key pair. Enter file in which to save the key (C:\\Users\\lsk69/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in C:\\Users\\lsk69/.ssh/id_rsa Your public key has been saved in C:\\Users\\lsk69/.ssh/id_rsa.pub The key fingerprint is: SHA256:SOV+Ur+E321Pw+9NL77mSgZm6V8lc+W3LJi3rN5qXG8 14062626+linsk27@user.noreply.gitee.com The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | . | | o | | . . . .| | . o . + ..| | . S B o o =| | * +o+o*o| | oo*o+==| | *+.=E*| | o+=O=+*| +----[SHA256]-----+ 获取公钥失败 1 ssh-agent -s 1 2 3 4 5 6 7 8 unable to start ssh-agent service, error :1058 \u0026gt; Fix Error **unable to start ssh-agent service, error: 1058(xxxx)** \u0026gt; \u0026gt; 1. win + R, Go To `services.msc` \u0026gt; \u0026gt; 2. Find And Check Is `OpenSSH Authentication Agent` Service Running \u0026gt; 再次运行公钥获取成功，连接成功 1 2 3 ssh-agent -s ssh -T git@gitee.com 1 Hi linsk27(@linsk27)! You\u0026#39;ve successfully authenticated, but GITEE.COM does not provide shell access. 复制公钥数据到gitee仓库的公钥（设置） 把ssh密钥添加到码云\n打开C盘–\u0026gt;用户–\u0026gt;你的用户名–\u0026gt;找到.ssh文件夹。找到id_rsa.pub（日过有多个用最新的那个），用记事本打开，复制整个文本粘贴到gitee（点头像，进入gitee设置面板，SSH设置，将复制的文本粘贴到公钥，标题会自动生成，然后点击添加，根据提示输入密码就可以了。）\n重新推送成功 1 git push origin lsk_dev 1 2 3 4 5 6 7 8 9 10 11 12 Enumerating objects: 16, done. Counting objects: 100% (16/16), done. Delta compression using up to 16 threads Compressing objects: 100% (15/15), done. Writing objects: 100% (16/16), 2.19 KiB | 2.19 MiB/s, done. Total 16 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0) remote: Powered by GITEE.COM [1.1.5] remote: Set trace flag 824c4db5 remote: Create a pull request for \u0026#39;lsk_dev\u0026#39; on Gitee by visiting: remote: https://gitee.com/larrry/competition-system/pull/new/larrry:lsk_dev...larrry:main To gitee.com:larrry/competition-system.git * [new branch] lsk_dev -\u0026gt; lsk_dev ","date":"2024-11-20T00:00:00Z","image":"https://linsk27.github.io/p/gitee%E4%BB%93%E5%BA%93%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A8%E9%80%81%E9%81%87%E8%A7%81%E7%9A%84%E9%94%99%E8%AF%AF/error.svg","permalink":"https://linsk27.github.io/p/gitee%E4%BB%93%E5%BA%93%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A8%E9%80%81%E9%81%87%E8%A7%81%E7%9A%84%E9%94%99%E8%AF%AF/","title":"gitee仓库的第一次推送遇见的错误"},{"content":"修改站点背景颜色 在\u0026quot;assets/scss/variables.scss\u0026quot;中找到 1 --body-background: #f6f6f6; 或在\u0026quot;assets/scss/customs.scss\u0026quot;中找到 1 --body-background: #f6f6f6; 参考自：Hugo | Hugo-stack-theme 主题魔改版\n友链的添加 在\u0026quot;content/page/links\u0026quot;的 index.md 中有详细解释，图标可通过图床或者本地渲染，模仿格式即可，或可直接把文件内容换为 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 --- title: 友情链接 links: - title: 爱吃鱼的小林 - linsk description: 一个大三程序员,博客讲述了hugo中许多美化stack的主题的教程、前端领域知识以及其他 website: https://linsk27.github.io/ image: fish.png menu: main: weight: -50 params: icon: link comments: false --- 显示文章更新时间 手动添加更新时间 hugo 默认位置为 archetypes/default.md 或者主题下目录下 xx 主题/archetypes/posts.md，加lastmod字段，在创建文章模板里添加以下一行，创建时会以主题目录下的模板来创建。 1 lastmod: { { .Date } } 添加lastmod，有个好处就是可自由修改这个字段的时间。 在 \u0026ldquo;config.toml/yaml/json/\u0026rdquo; 中写明调整这里顺序即可 1 frontmatter: lastmod = [\u0026#34;:git\u0026#34;, \u0026#34;lastmod\u0026#34;, \u0026#34;:fileModTime\u0026#34;, \u0026#34;:defalut\u0026#34;] 自动添加更新时间 记得在\u0026quot;config.toml/yaml/json\u0026quot;开启 gitinfo 1 2 #获取git信息 enableGitInfo = true #设为true 这样就提交代码时，就会去读取 git 时间，来更新文章的更新时间! 但是后面我发现了一个问题：每次重新 git push 之后所有文件最近更新时间 mtime 都变成推送的时刻，这是 git 的一个部署配置问题,因此我搜索了许多博客，终于在hugo github action|vecel 部署后文章更新时间异常修复这篇文章找到了解决方法，总的来说：\n在 \u0026ldquo;.github/workflows/xx.yml\u0026rdquo;,新增以下配置，主要是quotePath，默认情况下，文件名包含中文时，git 会使用引号吧文件名括起来，这会导致 action 中无法读取:GitInfo 变量，所以要设置Disable quotePath 1 2 3 4 5 6 - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false 使用checkout的话 fetch-depth 需要设为 0，depth默认是为 1，默认只拉取分支最近一次 commit，可能会导致一些文章的 GitInfo 变量无法获取，设为 0 代表拉去所有分支所有提交。 1 2 3 uses: actions/checkout@v4 with: fetch-depth: 0 #设为0 以下是我的最终的 yml 配置文件,大家可以参考\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest env: TZ: Asia/Shanghai # 添加正确的时区 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.TOKEN }} EXTERNAL_REPOSITORY: linsk27/linsk27.github.io PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 更新时间显示在卡片 stack 主题的文章更新时间在文章底部 若想在文章开头就显示更新时间，修改 \u0026ldquo;layouts/partials/article/components/detail.html\u0026rdquo;，在指定位置引入以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; ... \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; ... \u0026lt;!-- 更新时间 --\u0026gt; {{- if ne .Lastmod .Date -}} \u0026lt;div class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;time\u0026gt; {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} .... \u0026lt;/footer\u0026gt; ... \u0026lt;/div\u0026gt; 这样就会文章开头显示修改时间 显示文章字数统计 在\u0026quot;config.toml/yaml/json\u0026quot;的.params.article中，添加 1 wordCount: true #打开字数统计 注意的是默认 WordCount 是不统计中文字数的，你需要在\u0026quot;config.toml/yaml/json\u0026quot;中添加 1 hasCJKLanguage: true 在\u0026quot;layouts/partials/article/components/details.html\u0026quot;中的 \u0026lt;footer class=\u0026quot;article-time\u0026quot;\u0026gt;内，打开本地 hugo 静态调试，按照位置添加 1 2 \u0026lt;i class=\u0026#34;fa fa-regular fa-message\u0026#34; style=\u0026#34;color: #ff8e2d;\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; 本文有 {{ .WordCount }} 个字 效果如图 修改分类标签的颜色 在\u0026quot;content/categories\u0026quot;创建与分类同名的文件夹，并且在文件夹中创建\u0026quot;_index.md\u0026quot;文件并添加下面的内容,文件内会有一个 Test 的例子，可以模仿 Test 文件夹里面的内容 1 2 3 4 5 6 7 8 ---- title: 这里写分类名称 description: 分类简介，不需要可以删了 image: \u0026#34;categories.png\u0026#34; // 分类的题图 style: background: \u0026#34;#80aba9\u0026#34; //分类标签底色 color: \u0026#34;#fff\u0026#34; ---- 背景脚本放置位置 dev\\themes\\hugo-theme-stack\\layouts\\partials\\footer ","date":"2024-10-19T00:00:00Z","image":"https://linsk27.github.io/p/hugo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/hugo_hu_a06c8814bf2a76fe.jpg","permalink":"https://linsk27.github.io/p/hugo%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B/","title":"【Hugo】主题美化教程"},{"content":" 该文章图片从网上摘录 对linux的初步准备 1.下载最新版ubuntu和UltraISo、DiskGenius工具 ubuntu下载链接：(https://cn.ubuntu.com/download/desktop)\nUltraISo、DiskGenius下载链接：（https://pan.baidu.com/s/17AwjX2AO7E5fHjYWQmINPQ）提取码：7777\n2.进行u盘刻录 插入自备u盘，注！！！u盘进行录入时会覆盖所有u盘数据\n(1).解压并打开ULtralSo，输入注册名【Guanjiu】，输入注册码【A06C-83A7-701D-6CFC】，点击【确定】\n(2).点击【文件】\n(3).点击【打开】\n(4).选中打开下载好的ubuntu.iso\n(5).点击【写入硬盘映像】\n(6).点击【写入】,选择确定继续操作\n(7).u盘刻录成功\n进行磁盘分区 1.解压并且打开DiskGenius分盘工具 （本人由于磁盘管理器无法分盘所以使用了第三方分盘工具）\n(1).鼠标右击一个磁盘（容量大的）,选择【新建分区】\n(2).所分配的新分区不少于20g，点击【开始】\n(3).点击【是】\n(4).点击【完成】\n开始安装系统 1.系统安装（由于安装时没有进行截图，这里的图片摘录自网上 (1).重启电脑，并且在开机画面出现后按本机电脑的【快捷键】（各品牌电脑的启动选择不一样，我的电脑是华硕，点击【ESC】按键）进入启动选择界面\n(2).点击UEFI选项即选择自己的u盘介质\n(3).进入后我这里选择的是第一项【尝试或者安装ubantu】，然后进入安装界面\n(4).选择中文并且安装Ubuntu\n(5).选择chinese后，点击【继续】\n(6).点击【继续】\n(7).选择【其他选项】\n(8).到这个时候会有两种情况，\n第一种是“这台计算机似乎没有安装操作系统”，此时说明为单系统刷机，点击【继续】即可，本文讲的是双系统安装\n第二种是双系统安装，此时会进入分盘界面，选择空闲磁盘进行四次分区\n(9)分区完成后点击【现在安装】，点击【继续】\n(10)输入用户名密码即可开始等待安装\n(11)安装完成后重启\n2.完成安装 (1)重启后，每次开机时会出现三个选项，点击ubuntu进入ubuntu系统，点击win回到原系统\n(2)输入密码进入用户界面\n","date":"2024-10-14T00:00:00Z","permalink":"https://linsk27.github.io/p/linux%E7%9A%84%E5%AE%89%E8%A3%85ubuntu/","title":"Linux的安装（Ubuntu）"},{"content":"一 使用方法 userList数据循环在列表，下拉框显示的值为userList里面的label字段的值，实际值为对应label的uuid值，如下面例子中输出选中小王的值应该为01\n1 2 3 4 5 6 7 8 9 10 \u0026lt;template\u0026gt; \u0026lt;el-select v-model=\u0026#34;form\u0026#34;\u0026gt; \u0026lt;el-option v-for=\u0026#34;item in userList\u0026#34; :key=\u0026#34;item.uuid\u0026#34; :label=\u0026#34;item.username\u0026#34; :value=\u0026#34;item.uuid\u0026#34; /\u0026gt; \u0026lt;/el-select\u0026gt; \u0026lt;/template\u0026gt; 1 2 3 4 5 const userList = ref([{ username:\u0026#39;小王\u0026#39;, uuid:\u0026#39;01\u0026#39; }]) const form = ref\u0026lt;any\u0026gt;() 二 传值问题（匹配功能） 当我们在子组件进行表单操作的时候，需要从父组件往子组件传相关操作数据的值，若传入form的值是小王，则form在下拉框中显示的值为小王,实际值也为小王，若传入的值为01,则下拉框中显示的值为小王，实际值依旧为01\n","date":"2024-10-13T00:00:00Z","permalink":"https://linsk27.github.io/p/el-select%E6%A0%87%E7%AD%BE%E5%AD%98%E5%9C%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/","title":"el-select标签存在的数据匹配问题"}]